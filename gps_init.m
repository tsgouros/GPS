function gps_init()
% Initializes GPS directories on a new computer
%
% Author: Alexander Conrad Nied (anied@cs.washington.edu)
%
% Changelog:
% 2013-11-22 Created
% 2013-11-24 Finished
% 2014-01-02 GPS1.9 Adds the image directory
% 2014-01-06 Removed PLV from stages and added a new stage names field
% 2020-08-04 Added the shell script and environment variable stuff.
%
% GPS is a GUI-based program composed by David Gow and members of his lab
% at the Massachusetts General Hospital to automate MNE and FSL analyses
% of MR-constrained MEG/EEG data and to perform Kalman filter based Granger
% analyses of those data.
%
% Copyright (C) 2014  Alexander Conrad Nied and David Gow
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.

%% This is a weird one. The Martinos system has directories like
%% '/home/1/ts301' and when you use the Matlab 'pwd' command, it
%% returns '/home/001/ts301'. So we do not use the Matlab command.
[stat, pwdFix] = system("echo -n $PWD");

% Confirm
files = dir();
if(sum(strcmp({files.name},'parameters')))
    answer = questdlg('This will reset GPS, are you sure?');
    if(~strcmp(answer, 'Yes'))
        return
    end
end

% Get some information
user = getenv('USER');
date = datestr(now, 'YYYY-mm-DD');

% Ask the user about folders
folders = {pwdFix, [pwdFix, '/parameters']};
folders = inputdlg({'Main GPS folder', 'parameters'}, 'Select where you would like to store GPS data', [1 50], folders);
gpsdir = folders{1};

% Citation tag
citation = sprintf('%%\n%% Author: Alexander Conrad Nied (anied@cs.washington.edu)\n%%\n%% Changelog:\n%% %s Automatically generated by gps_init to format GPS by user %s\n', date, user);

% Change the directory pointing program
if exist([folders{1}, '/functions']) == 7
    fid = fopen([folders{1} '/functions/gps/gps_dir.m'], 'w');
    fprintf(fid, 'function direc = %s\n', folders{1});
    fprintf(fid, '%% Returns just the main GPS directory\n');
    fprintf(fid, '%s\n', citation);
    fprintf(fid, '\ndirec = ''%s/'';', folders{1});
    fprintf(fid, '\n\nend\n');
    fclose(fid);
else
    error("functions dir does not exist. Are you sure about GPS location?");
end

%% Now we are going to create a little shell script that is run before the
%% Matlab GPS functions execute any shell command, to enforce uniformity of
%% environment, and allow functions to reference environment variables.

% Ask the user about folders
fshome = pwdFix;
mneroot = pwdFix;
matlabroot = pwdFix;
studydir = [pwdFix, '/data'];

exfolders = {fshome, '$FREESURFER_HOME/fsfast', '$FREESURFER_HOME/mni', mneroot, studydir};
exfolders = inputdlg({'Freesurfer home folder', 'Fsfast Folder', 'MNI Folder', 'MNE Folder', 'Where will study data live?'}, 'Select where you keep the important GPS tools and study data', [1 70], exfolders);

% Citation tag
citationSh = sprintf('##\n## Author: Tom Sgouros (tom@sgouros.com)\n##\n## Changelog:\n## %s Automatically generated by gps_init by user %s\n##', date, user);

% Change the directory pointing program
fid = fopen([gpsdir, '/gps_init.bash'], 'w');
fprintf(fid, '## Environment definitions for using GPS, the Gow lab Granger software.\n');
fprintf(fid, '%s\n', citationSh);
fprintf(fid, 'export FREESURFER_HOME=%s\n', exfolders{1});
fprintf(fid, 'source $FREESURFER_HOME/SetUpFreeSurfer.sh\n');
fprintf(fid, 'export FSFAST_HOME=%s\n', exfolders{2});
fprintf(fid, 'export MNI_DIR=%s\n', exfolders{3});
fprintf(fid, 'export MNE_ROOT=%s\n', exfolders{4});
fprintf(fid, 'source $MNE_ROOT/bin/mne_setup_sh\n');
fprintf(fid, 'export STUDY_DIR=%s\n', exfolders{5});
fclose(fid);

% Make a C Shell version, too.
fid = fopen([gpsdir, '/gps_init.csh'], 'w');
fprintf(fid, '## Environment definitions for using GPS, the Gow lab Granger software.\n');
fprintf(fid, '%s\n', citationSh);
fprintf(fid, 'setenv FREESURFER_HOME %s\n', exfolders{1});
fprintf(fid, 'source $FREESURFER_HOME/SetUpFreeSurfer.csh\n');
fprintf(fid, 'setenv FSFAST_HOME %s\n', exfolders{2});
fprintf(fid, 'setenv MNI_DIR %s\n', exfolders{3});
fprintf(fid, 'setenv MNE_ROOT %s\n', exfolders{4});
%% This appears to be the cshell version of mne_setup_sh.
fprintf(fid, 'source $MNE_ROOT/bin/mne_setup\n');
fprintf(fid, 'setenv STUDY_DIR %s\n', exfolders{5});
fclose(fid);

% Make a Matlab version, too. Belt *and* suspenders.
fid = fopen([gpsdir, '/gps_envvars.m'], 'w');
fprintf(fid, '%% Environment definitions for using GPS, the Gow lab Granger software.\n');
fprintf(fid, '%% Note we do *not* try to use the environment variables defined in the\n');
fprintf(fid, '%% Freesurfer or MNE setup scripts.\n');
fprintf(fid, '%% *** THIS IS AN AUTOMATICALLY GENERATED FILE ***\n');
fprintf(fid, 'function gps_envvars()\n', exfolders{1});
fprintf(fid, '  setenv(''FREESURFER_HOME'', ''%s'');\n', exfolders{1});
fprintf(fid, '  setenv(''FSFAST_HOME'', ''%s'');\n', exfolders{2});
fprintf(fid, '  setenv(''MNI_DIR'', ''%s'');\n', exfolders{3});
fprintf(fid, '  setenv(''MNE_ROOT'', ''%s'');\n', exfolders{4});
fprintf(fid, '  setenv(''STUDY_DIR'', ''%s'');\n', exfolders{5});
fprintf(fid, 'end\n');
fclose(fid);

if ~exist(exfolders{5}, 'dir')
    mkdir(exfolders{5})
end

% Change the data directory pointing program
fid = fopen([gpsdir, '/gps_data_dir.m'], 'w');
fprintf(fid, 'function direc = gps_data_dir()\n');
fprintf(fid, '%% Returns just the data directory\n');
fprintf(fid, '%s\n', citation);
fprintf(fid, '%% Generated file -- DO NOT EDIT.\n');
fprintf(fid, '\ndirec = ''%s/'';', exfolders{5});
fprintf(fid, '\n\nend\n');
fclose(fid);

% Preset Program
fid = fopen([gpsdir '/gps_presets.m'], 'w');
fprintf(fid, 'function preset = gps_presets(name)\n');
fprintf(fid, '%% Returns preset variables.\n');
fprintf(fid, '%s\n', citation);
fprintf(fid, '%% Acquire the necessary environment variables.\n');
fprintf(fid, 'gps_envvars();\n');
fprintf(fid, 'switch lower(name)\n');
fprintf(fid, '    case {''gpsnum'', ''gpsfig'', ''menu figure''}\n');
fprintf(fid, '        preset = 6750000;\n');
fprintf(fid, '    case {''gpsanum'', ''gpsafig'', ''analysis figure''}\n');
fprintf(fid, '        preset = 6754000;\n');
fprintf(fid, '    case {''gpsenum'', ''gpsefig'', ''edit figure''}\n');
fprintf(fid, '        preset = 6753000;\n');
fprintf(fid, '    case {''gpsrnum'', ''gpsrfig'', ''region figure''}\n');
fprintf(fid, '        preset = 6752000;\n');
fprintf(fid, '    case {''gpspnum'', ''gpspfig'', ''plotting figure''}\n');
fprintf(fid, '        preset = 6757000;\n');
fprintf(fid, '    %% Where to find GPS itself.\n');
fprintf(fid, '    case {''dir'', ''directory''}\n');
fprintf(fid, '        preset = ''%s'';\n', folders{1});
fprintf(fid, '    %% Where to find GPS functions.\n');
fprintf(fid, '    case {''functions'', ''functiondir'', ''fdir''}\n');
fprintf(fid, '        preset = ''%s/functions'';\n', folders{1});
fprintf(fid, '    %% Where to find parameters for GPS itself.\n');
fprintf(fid, '    case {''parameters'', ''parameterdir'', ''pdir''}\n');
fprintf(fid, '        preset = ''%s'';\n', folders{2});
fprintf(fid, '    %% Where to find all data for studies.\n');
fprintf(fid, '    case {''studydir''}\n');
fprintf(fid, '        preset = ''%s'';\n', exfolders{5});
fprintf(fid, '    %% Where to find parameters for a study.\n');
fprintf(fid, '    case {''studyparameters''}\n');
fprintf(fid, '        preset = ''%s/parameters'';\n', exfolders{5});
fprintf(fid, '    case {''images'', ''imagedir'', ''idir''}\n');
fprintf(fid, '        preset = ''%s/images'';\n', exfolders{5});
fprintf(fid, '    case {''logs'', ''logdir'', ''ldir''}\n');
fprintf(fid, '        preset = ''%s/logs'';\n', exfolders{5});
fprintf(fid, '    case {''study''}\n');
fprintf(fid, '        preset = ''SampleStudy'';\n');
fprintf(fid, '    case {''stages''}\n');
fprintf(fid, '        preset = {''util'', ''mri'', ''meg'', ''mne'', ''granger''};\n');
fprintf(fid, '        %%preset = {''util'', ''mri'', ''meg'', ''mne'', ''plv'', ''granger''};\n');
fprintf(fid, '    case {''stagenames''}\n');
fprintf(fid, '        preset = {''Utilities'', ''MRI'', ''MEG'', ''MNE'', ''Granger''};\n');
fprintf(fid, '        %%preset = {''Utilities'', ''MRI'', ''MEG'', ''MNE'', ''PLV'', ''Granger''};\n');
fprintf(fid, 'end %% switch\n');
fprintf(fid, 'if (ischar(preset))\n');
fprintf(fid, '    if (preset(1) == ''/'')  \n');
fprintf(fid, '       [status, msg, msgID] = mkdir(preset);\n');
fprintf(fid, '       if (status ~= 1)\n');
fprintf(fid, '           preset = '''';\n');
fprintf(fid, '           disp([msg, '': '', msgID])\n');
fprintf(fid, '       end \n');
fprintf(fid, '    end \n');
fprintf(fid, 'end \n');
fprintf(fid, '\nend %% function\n');
fclose(fid);

% Erase the parameters directory with everything but the sample study

answer = questdlg('Clear Parameters Folder?');
if(strcmp(answer, 'Yes'))
    parameters = dir(folders{2});
    for i = 1:length(parameters)
        folderName = parameters(i).name;
        switch folderName
            case {'.', '..'}
            case 'SampleStudy'
                % Do nothing
            case 'GPS'
                % reset userstudies.mat
                save([folders{2} '/GPS/userstudies.mat'], '');
            otherwise
                rmdir([folders{2} '/' folderName], 's')
        end % switch on the folder name
    end % for all parameter folders
end

% Clear images and logs folder
%files = dir(folders{3});
%for i_file = 1:length(files)
%    filename = files(i_file).name;
%    if(filename(1) ~= '.')
%        if(files(i_file).isdir)
%            rmdir([folders{3} '/' filename], 's');
%        else
%            delete([folders{3} '/' filename]);
%        end
%    end
%end
%if(~exist(folders{3}, 'dir'))
%    mkdir(folders{3});
%end

% Clear the logs folder
%if(~exist(folders{4}, 'dir'))
%    mkdir(folders{4});
%end
%delete([folders{4} '/*']);




end % function
